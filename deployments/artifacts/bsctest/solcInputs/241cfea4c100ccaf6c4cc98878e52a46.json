{
  "language": "Solidity",
  "sources": {
    "contracts/ERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ncontract ERC20 {\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    constructor(uint256 tokens) {\r\n        balances[msg.sender] = tokens;\r\n    }\r\n\r\n    function burnToken(uint256 _amount) public returns (bool) {\r\n        require(balances[msg.sender] >= _amount);\r\n\r\n        balances[msg.sender] -= _amount;\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _from, address _to, uint256 _amount) public returns (bool) {\r\n        require(balances[_from] >= _amount);\r\n\r\n        balances[_from] -= _amount;\r\n\r\n        balances[_to] += _amount;\r\n\r\n        emit Transfer(_from, _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yul": true,
        "deduplicate": true,
        "cse": true,
        "constantOptimizer": true
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}