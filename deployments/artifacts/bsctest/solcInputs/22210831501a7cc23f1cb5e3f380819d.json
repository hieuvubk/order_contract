{
  "language": "Solidity",
  "sources": {
    "contracts/OrderStore.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/*\n * Legacy version for reference and backward compatibility, similar to OwnableDocumentStore\n */\ncontract OrderStore is Ownable {\n\n  bytes32 public constant NVKD_ROLE = keccak256(\"NVKD_ROLE\"); // Nhan vien kinh doanh\n  bytes32 public constant NVDP_ROLE = keccak256(\"NVDP_ROLE\"); // Nhan vien dieu phoi\n  bytes32 public constant NVGH_ROLE = keccak256(\"NVGH_ROLE\"); // Nhan vien giao hang\n  bytes32 public constant QL_ROLE = keccak256(\"QL_ROLE\"); // Quan ly\n  bytes32 public constant SHOP_ROLE = keccak256(\"SHOP_ROLE\"); // Shop\n  bytes32 public constant NCC_ROLE = keccak256(\"NCC_ROLE\"); // Nha cung cap\n\n  string name;\n  // accepted = Xác nhận\n  // call_ship = Giao ship lấy hàng\n  // taked = Ship đã lấy hàng\n  // warehouse = Giao kho\n  // delivering = Đang giao hàng\n  // delivery_success = Giao hàng thành công\n  // rejected = Trả lại hàng\n  // return_warehouse = Nhập lại kho\n  // return_shop = Trả shop thành công\n  // cancel = Hủy vận đơn\n  // checking = Đang đối soát\n  // checked = Đã đối soát\n  // wait_deposit = Chờ cọc\n  // deposited = Đã đặt cọc\n  enum OrderStatus {\n    accepted, \n    call_ship,\n    taked,\n    warehouse,\n    delivering,\n    delivery_success,\n    rejected,\n    return_warehouse,\n    return_shop,\n    cancel,\n    checking,\n    checked,\n    wait_deposit, \n    deposited \n  }\n\n  struct StatusHistory {\n    OrderStatus status;\n    uint256 atBlock;\n  }\n\n  struct Consensus {\n    bool verified;\n    uint256 timestamp;\n  }\n\n  /// A mapping of the order id to the hash that was issued\n  mapping(string => bytes32) public orders;\n\n  /// A mapping of the order id to order status throught time\n  mapping(string => StatusHistory[]) public statusHistory;\n\n  /// A mapping of the address to role\n  mapping(address => bytes32) public roles;\n\n  /// A mapping of role to status can accept\n  mapping(bytes32 => OrderStatus[]) public rules;\n\n  /// A mapping of consensus hash to signed\n  mapping(bytes32 => mapping(address => bool)) public signatures;\n\n  /// A mapping of consensus hash to signed\n  mapping(bytes32 => Consensus) public consensusTx;\n\n  address[] public signers;\n\n  event OrderUpload(string orderId, bytes32 orderHash, address sender );\n  event UpdateStatus(string orderId, OrderStatus status, address sender);\n  event Sign(bytes32 data, address signers);\n  event Verify(bytes32 data);\n\n  constructor() public {\n    roles[msg.sender] = NVKD_ROLE;\n    signers.push(msg.sender);\n    initRules();\n  }\n\n  function initRules() internal {\n    rules[NVKD_ROLE].push(OrderStatus.accepted);\n    rules[NVKD_ROLE].push(OrderStatus.cancel);\n    rules[NVKD_ROLE].push(OrderStatus.return_shop);\n    rules[NVKD_ROLE].push(OrderStatus.checked);\n    rules[NVKD_ROLE].push(OrderStatus.checking);\n    rules[NVDP_ROLE].push(OrderStatus.call_ship);\n    rules[NVGH_ROLE].push(OrderStatus.taked);\n    rules[NVGH_ROLE].push(OrderStatus.warehouse);\n    rules[NVGH_ROLE].push(OrderStatus.delivering);\n    rules[NVGH_ROLE].push(OrderStatus.rejected);\n    rules[NVGH_ROLE].push(OrderStatus.return_warehouse);\n    rules[NVGH_ROLE].push(OrderStatus.deposited);\n  }\n\n  function issue(string memory orderId, bytes32 orderHash) public onlyOwner {\n    require(statusHistory[orderId].length == 0, \"Order exist\");\n\n    statusHistory[orderId].push(StatusHistory({\n      status: OrderStatus.accepted,\n      atBlock: block.number\n    }));\n    orders[orderId] = orderHash;\n    emit OrderUpload(orderId, orderHash, msg.sender);\n  }\n\n  function updateOrderStatus(string memory orderId, OrderStatus status) public onlyOwner {\n    require(statusHistory[orderId].length != 0, \"Order not exist\");\n    bytes32 role = roles[msg.sender];\n    OrderStatus[] memory remainStatus = rules[role];\n    bool isExist = false;\n    for(uint256 i=0; i < remainStatus.length; i++) {\n      if(status == remainStatus[i]) {\n        isExist = true;\n        break;\n      }\n    }\n    require(isExist, \"No permission\");\n    statusHistory[orderId].push(StatusHistory({\n          status: status,\n          atBlock: block.number\n    }));\n    emit UpdateStatus(orderId, status, msg.sender);\n  }\n\n  function getOrder(string memory orderId) public view returns (bytes32, StatusHistory[] memory) {\n    return (orders[orderId], statusHistory[orderId]);\n  }\n\n  function submitTransaction(bytes32 data)\n        public\n        returns (uint transactionId)\n  {\n    require(roles[msg.sender] == NVKD_ROLE || roles[msg.sender] == SHOP_ROLE || roles[msg.sender] == NCC_ROLE, \"Not permission\");\n    addTransaction(data);\n    signatures[data][msg.sender] = true;\n    emit Sign(data, msg.sender);\n    confirmTransaction(data);\n  }\n\n  function addTransaction(bytes32 data)\n        public\n    {\n        if(consensusTx[data].timestamp != 0) {\n          return;\n        } else {\n          consensusTx[data] = Consensus({\n            verified: false,\n            timestamp: block.timestamp\n          });\n        }\n    }\n\n  function confirmTransaction(bytes32 data)\n        public\n    {\n        uint256 count = 0;\n        for(uint256 i = 0 ; i < signers.length; i++) {\n          if(signatures[data][signers[i]] == true) {\n            count++;\n          }\n        }\n        if(count == signers.length) {\n          consensusTx[data].verified = true;\n          emit Verify(data);\n        }\n    }\n  \n  function setSigner(address signer) onlyOwner public {\n    signers.push(signer);\n  }\n\n  function setRole(address user, bytes32 role) public {\n    roles[user] = role;\n  }\n\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yul": true,
        "deduplicate": true,
        "cse": true,
        "constantOptimizer": true
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}