{
  "language": "Solidity",
  "sources": {
    "contracts/OrderStore.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/*\r\n * Legacy version for reference and backward compatibility, similar to OwnableDocumentStore\r\n */\r\ncontract OrderStore is Ownable {\r\n\r\n  bytes32 public constant NVKD_ROLE = keccak256(\"NVKD_ROLE\"); // Nhan vien kinh doanh\r\n  bytes32 public constant NVDP_ROLE = keccak256(\"NVDP_ROLE\"); // Nhan vien dieu phoi\r\n  bytes32 public constant NVGH_ROLE = keccak256(\"NVGH_ROLE\"); // Nhan vien giao hang\r\n  bytes32 public constant QL_ROLE = keccak256(\"QL_ROLE\"); // Quan ly\r\n  bytes32 public constant SHOP_ROLE = keccak256(\"SHOP_ROLE\"); // Shop\r\n  bytes32 public constant NCC_ROLE = keccak256(\"NCC_ROLE\"); // Nha cung cap\r\n\r\n  string name;\r\n  // accepted = Xác nhận\r\n  // call_ship = Giao ship lấy hàng\r\n  // taked = Ship đã lấy hàng\r\n  // warehouse = Giao kho\r\n  // delivering = Đang giao hàng\r\n  // delivery_success = Giao hàng thành công\r\n  // rejected = Trả lại hàng\r\n  // return_warehouse = Nhập lại kho\r\n  // return_shop = Trả shop thành công\r\n  // cancel = Hủy vận đơn\r\n  // checking = Đang đối soát\r\n  // checked = Đã đối soát\r\n  // wait_deposit = Chờ cọc\r\n  // deposited = Đã đặt cọc\r\n  enum OrderStatus {\r\n    accepted, \r\n    call_ship,\r\n    taked,\r\n    warehouse,\r\n    delivering,\r\n    delivery_success,\r\n    rejected,\r\n    return_warehouse,\r\n    return_shop,\r\n    cancel,\r\n    checking,\r\n    checked,\r\n    wait_deposit, \r\n    deposited \r\n  }\r\n\r\n  struct StatusHistory {\r\n    OrderStatus status;\r\n    uint256 atBlock;\r\n  }\r\n\r\n  struct Consensus {\r\n    bool verified;\r\n    uint256 timestamp;\r\n  }\r\n\r\n  /// A mapping of the order id to the hash that was issued\r\n  mapping(string => bytes32) public orders;\r\n\r\n  /// A mapping of the order id to order status throught time\r\n  mapping(string => StatusHistory[]) public statusHistory;\r\n\r\n  /// A mapping of the address to role\r\n  mapping(address => bytes32) public roles;\r\n\r\n  /// A mapping of role to status can accept\r\n  mapping(bytes32 => OrderStatus[]) public rules;\r\n\r\n  /// A mapping of consensus hash to signed\r\n  mapping(bytes32 => mapping(address => bool)) public signatures;\r\n\r\n  /// A mapping of consensus hash to signed\r\n  mapping(string => mapping(bytes32 => Consensus)) public consensusTx;\r\n\r\n  address[] public signers;\r\n\r\n  uint256 public constant requires = 2; // Nha cung cap\r\n\r\n  event OrderUpload(string orderId, bytes32 orderHash, address sender );\r\n  event UpdateStatus(string orderId, OrderStatus status, address sender);\r\n  event Sign(string id, bytes32 data, address signers);\r\n  event Verify(string id, bytes32 data);\r\n\r\n  constructor() public {\r\n    roles[msg.sender] = NVKD_ROLE;\r\n    signers.push(msg.sender);\r\n    initRules();\r\n  }\r\n\r\n  function initRules() internal {\r\n    rules[NVKD_ROLE].push(OrderStatus.accepted);\r\n    rules[NVKD_ROLE].push(OrderStatus.cancel);\r\n    rules[NVKD_ROLE].push(OrderStatus.return_shop);\r\n    rules[NVKD_ROLE].push(OrderStatus.checked);\r\n    rules[NVKD_ROLE].push(OrderStatus.checking);\r\n    rules[NVDP_ROLE].push(OrderStatus.call_ship);\r\n    rules[NVGH_ROLE].push(OrderStatus.taked);\r\n    rules[NVGH_ROLE].push(OrderStatus.warehouse);\r\n    rules[NVGH_ROLE].push(OrderStatus.delivering);\r\n    rules[NVGH_ROLE].push(OrderStatus.rejected);\r\n    rules[NVGH_ROLE].push(OrderStatus.return_warehouse);\r\n    rules[NVGH_ROLE].push(OrderStatus.deposited);\r\n  }\r\n\r\n  function issue(string memory orderId, bytes32 orderHash) public onlyOwner {\r\n    require(statusHistory[orderId].length == 0, \"Order exist\");\r\n\r\n    statusHistory[orderId].push(StatusHistory({\r\n      status: OrderStatus.accepted,\r\n      atBlock: block.number\r\n    }));\r\n    orders[orderId] = orderHash;\r\n    emit OrderUpload(orderId, orderHash, msg.sender);\r\n  }\r\n\r\n  function updateOrderStatus(string memory orderId, OrderStatus status) public onlyOwner {\r\n    require(statusHistory[orderId].length != 0, \"Order not exist\");\r\n    bytes32 role = roles[msg.sender];\r\n    OrderStatus[] memory remainStatus = rules[role];\r\n    bool isExist = false;\r\n    for(uint256 i=0; i < remainStatus.length; i++) {\r\n      if(status == remainStatus[i]) {\r\n        isExist = true;\r\n        break;\r\n      }\r\n    }\r\n    require(isExist, \"No permission\");\r\n    statusHistory[orderId].push(StatusHistory({\r\n          status: status,\r\n          atBlock: block.number\r\n    }));\r\n    emit UpdateStatus(orderId, status, msg.sender);\r\n  }\r\n\r\n  function getOrder(string memory orderId) public view returns (bytes32, StatusHistory[] memory) {\r\n    return (orders[orderId], statusHistory[orderId]);\r\n  }\r\n\r\n  function submitTransaction(string calldata id, bytes32 data)\r\n        public\r\n        returns (uint transactionId)\r\n  {\r\n    require(roles[msg.sender] == QL_ROLE || roles[msg.sender] == SHOP_ROLE || roles[msg.sender] == NCC_ROLE, \"Not permission\");\r\n    addTransaction(id, data);\r\n    signatures[data][msg.sender] = true;\r\n    emit Sign(id, data, msg.sender);\r\n    confirmTransaction(id,data);\r\n  }\r\n\r\n  function addTransaction(string calldata id, bytes32 data)\r\n        public\r\n    {\r\n        if(consensusTx[id][data].timestamp != 0) {\r\n          return;\r\n        } else {\r\n          consensusTx[id][data] = Consensus({\r\n            verified: false,\r\n            timestamp: block.timestamp\r\n          });\r\n        }\r\n    }\r\n\r\n  function confirmTransaction(string calldata id, bytes32 data)\r\n        public\r\n    {\r\n        uint256 count = 0;\r\n        for(uint256 i = 0 ; i < signers.length; i++) {\r\n          if(signatures[data][signers[i]] == true) {\r\n            count++;\r\n          }\r\n        }\r\n        if(count == requires) {\r\n          consensusTx[id][data].verified = true;\r\n          emit Verify(id, data);\r\n        }\r\n    }\r\n  \r\n  function setSigner(address signer) onlyOwner public {\r\n    signers.push(signer);\r\n  }\r\n\r\n  function setRole(address user, bytes32 role) public {\r\n    roles[user] = role;\r\n  }\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yul": true,
        "deduplicate": true,
        "cse": true,
        "constantOptimizer": true
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}